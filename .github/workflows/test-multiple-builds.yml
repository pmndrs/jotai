name: Test Multiple Builds

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

jobs:
  test_matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: [cjs, esm, umd]
        env: [development, production]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: yarn
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - run: yarn install --frozen-lockfile --check-files
      - run: yarn build
      - name: Use React 17 for production test
        if: ${{ matrix.env == 'production' }}
        run: |
          yarn add -D react@17.0.2 react-dom@17.0.2 @testing-library/react@12.1.4
      - name: Patch for DEV-ONLY
        if: ${{ matrix.env == 'development' }}
        run: |
          sed -i~ "s/\(it\|describe\)[.a-zA-Z]*('\[DEV-ONLY\]/\1('/" tests/*/*.tsx tests/*/*/*.tsx
          sed -i~ "s/\(it\|describe\)[.a-zA-Z]*('\[PRD-ONLY\]/\1.skip('/" tests/*/*.tsx tests/*/*/*.tsx
      - name: Patch for PRD-ONLY
        if: ${{ matrix.env == 'production' }}
        run: |
          sed -i~ "s/\(it\|describe\)[.a-zA-Z]*('\PRD-ONLY\]/\1('/" tests/*/*.tsx tests/*/*/*.tsx
          sed -i~ "s/\(it\|describe\)[.a-zA-Z]*('\[DEV-ONLY\]/\1.skip('/" tests/*/*.tsx tests/*/*/*.tsx
      - name: Patch for CJS
        if: ${{ matrix.build == 'cjs' }}
        run: |
          sed -i~ "s/resolve('\.\/src\(.*\)\.ts')/resolve('\.\/dist\1.js')/" vitest.config.ts
          sed -i~ "s/import { useResetAtom } from 'jotai\/react\/utils'/const { useResetAtom } = require('..\/..\/..\/dist\/react\/utils.js')/" tests/react/utils/useResetAtom.test.tsx
          sed -i~ "s/import { RESET, atomWithReducer, atomWithReset } from 'jotai\/vanilla\/utils'/const { RESET, atomWithReducer, atomWithReset } = require('..\/..\/..\/dist\/vanilla\/utils.js')/" tests/react/utils/useResetAtom.test.tsx
      - name: Patch for ESM
        if: ${{ matrix.build == 'esm' }}
        run: |
          sed -i~ "s/resolve('\.\/src\(.*\)\.ts')/resolve('\.\/dist\/esm\1.mjs')/" vitest.config.ts
          sed -i~ "1s/^/import.meta.env=import.meta.env||{};import.meta.env.MODE='${NODE_ENV}';/" tests/*/*.tsx tests/*/*/*.tsx
        env:
          NODE_ENV: ${{ matrix.env }}
      - name: Patch for UMD
        if: ${{ matrix.build == 'umd' }}
        run: |
          sed -i~ "s/resolve('\.\/src\(.*\)\.ts')/resolve('\.\/dist\/umd\1.${NODE_ENV}.js')/" vitest.config.ts
          rm tests/react/utils/useResetAtom.test.tsx # FIXME we skip this for now. Actually I'm not sure if we really run tests with UMD build
        env:
          NODE_ENV: ${{ matrix.env }}
      - name: Patch for SystemJS
        if: ${{ matrix.build == 'system' }}
        run: |
          sed -i~ "s/resolve('\.\/src\(.*\)\.ts')/resolve('\.\/dist\/system\1.${NODE_ENV}.js')/" vitest.config.ts
        env:
          NODE_ENV: ${{ matrix.env }}
      - name: Test ${{ matrix.build }} ${{ matrix.env }}
        run: |
          yarn test:ci:build # test:ci
        env:
          NODE_ENV: ${{ matrix.env }}
